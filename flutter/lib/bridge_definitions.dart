// AUTO GENERATED FILE, DO NOT EDIT.
// Generated by `flutter_rust_bridge`@ 1.82.3.
// ignore_for_file: non_constant_identifier_names, unused_element, duplicate_ignore, directives_ordering, curly_braces_in_flow_control_structures, unnecessary_lambdas, slash_for_doc_comments, prefer_const_literals_to_create_immutables, implicit_dynamic_list_literal, duplicate_import, unused_import, unnecessary_import, prefer_single_quotes, prefer_const_constructors, use_super_parameters, always_use_package_imports, annotate_overrides, invalid_use_of_protected_member, constant_identifier_names, invalid_use_of_internal_member, prefer_is_empty, unnecessary_const

import 'dart:convert';
import 'dart:async';
import 'package:meta/meta.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge.dart';
import 'package:uuid/uuid.dart';

import 'package:collection/collection.dart';

abstract class Native {
  Future<U8Array32> kdf({required Uint8List km, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kKdfConstMeta;

  ///
  /// * Generates all the needed keys for first time set up.
  /// * It will then dump all of the keys in the client folder.
  /// *
  /// * The force argument will forcefully override all currently present
  /// * keys in the client folder. Note that this will require a complete
  /// * reupload of all keys to the server.
  ///
  Future<void> generateKeysAndDump({dynamic hint});

  FlutterRustBridgeTaskConstMeta get kGenerateKeysAndDumpConstMeta;

  ///
  /// * Called upon registration to the server. Will publish all stored public
  /// * keys.
  ///
  Future<bool> registerAndPublish({required String regForm, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kRegisterAndPublishConstMeta;

  ///
  /// * Login function
  ///
  Future<bool> login({required String logForm, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kLoginConstMeta;

  ///
  /// * Login function
  ///
  Future<void> logout({dynamic hint});

  FlutterRustBridgeTaskConstMeta get kLogoutConstMeta;

  ///
  /// * Requests a conncetion to the client with the email
  /// * Returns true if request was made successfully.
  /// * This DOES NOT mean that the request was approved,
  /// * only that it was posted onto the server.
  ///
  Future<bool> requestConnection({required String email, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kRequestConnectionConstMeta;

  Future<bool> pendingRequests({dynamic hint});

  FlutterRustBridgeTaskConstMeta get kPendingRequestsConstMeta;

  Future<void> approvedRequests({dynamic hint});

  FlutterRustBridgeTaskConstMeta get kApprovedRequestsConstMeta;

  ///
  /// * Upon approval of key fetching (aka the person allowed
  /// * you to initiate contact), fetch all keys needed and
  /// * initiate the handshake protocol.
  /// *
  /// * Email identifies the recipient of this handshake
  ///
  Future<void> fetchKeysHandshake({required String reqId, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kFetchKeysHandshakeConstMeta;

  Future<void> completeHandshake({dynamic hint});

  FlutterRustBridgeTaskConstMeta get kCompleteHandshakeConstMeta;
}

class U8Array32 extends NonGrowableListView<int> {
  static const arraySize = 32;
  U8Array32(Uint8List inner)
      : assert(inner.length == arraySize),
        super(inner);
  U8Array32.unchecked(Uint8List inner) : super(inner);
  U8Array32.init() : super(Uint8List(arraySize));
}
